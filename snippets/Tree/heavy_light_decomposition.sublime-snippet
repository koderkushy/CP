<snippet>
	<content><![CDATA[
template<typename Node>
class Hld: private Lca {
    template<typename T> using vec = std::vector<T>;
public:
    struct biNod {
        Node f, b;
        auto operator+ (const biNod x) const {
            return biNod{f + x.f, x.b + b};
        }
    };

    Hld (vec<vec<int>> g, const int root, const vec<Node>& a, const Node id):
        Lca(g, root), h(n, root), id(id),
        s([&](){
            dfs(g, root);
            vec<biNod> fa(n);
            
            for (int i = 0; i < n; ++i)
                fa[in[i]] = biNod{a[i], a[i]};

            return std::move(fa);
        }(), biNod{id, id})
    {}

    void dfs (auto& g, int u) {
        in[u] = time++;
        if (g[u][0] == par[0][u])
            std::swap(g[u][0], g[u].back());

        for (auto& v: g[u]) if (v != par[0][u])
            if (sub[v] > sub[g[u][0]])
                std::swap(v, g[u][0]);

        for (auto v: g[u]) if (v != par[0][u])
            h[v] = (v == g[u][0] ? h[u]: v),
            dfs(g, v);
    }

    void set (int i, const Node& x) {
        s.set(in[i], biNod{x, x});
    }

    Node qu_path (int u, int v) const {
        const auto l = lca(u, v);
        Node zl = id, zr = id;

        while (d[h[u]] > d[l])
            zl = zl + s.qu(in[h[u]], in[u] + 1).b,
            u = par[0][h[u]];
        if (u != l)
            zl = zl + s.qu(in[l] + 1, in[u] + 1).b;
        
        while (d[h[v]] > d[l])
            zr = s.qu(in[h[v]], in[v] + 1).f + zr,
            v = par[0][h[v]];
        if (d[v] >= d[l])
            zr = s.qu(in[l], in[v] + 1).f + zr;

        return zl + zr;
    }

    Node qu_subt (const int u) const {
        return s.qu(in[u], in[u] + sub[u]).f;
    }

private:
    vec<int> h;
    int time = 0;
    Node id;
    Segtree<biNod> s;
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>ihld</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>