<snippet>
	<content><![CDATA[
class TreeLca {
public:

    explicit TreeLca (const std::vector<std::vector<int>>& initial_adj,
                  const int root):
    N(initial_adj.size()),
    root(root),
    adj(initial_adj),
    par(N, std::vector(1, root)),
    in(N),
    sub(N, 1),
    depth(N),
    log_max_depth((dfs(root), 32 - __builtin_clz(max(*std::max_element(depth.begin(), depth.end()) - 1, 0))))
    {
        for (auto& v: par)
            v.resize(log_max_depth + 1);

        for (int j = 0; j < log_max_depth; ++j)
            for (int i = 0; i < N; ++i)
                par[i][j + 1] = par[par[i][j]][j];
    }

    inline bool is_ancestor (const int u, const int v) const {
        return in[u] <= in[v] and in[u] + sub[u] > in[v];
    }

    int lca (int u, int v) const {
        if (is_ancestor(u, v)) return u;
        if (is_ancestor(v, u)) return v;

        for (int j = log_max_depth; j > -1; --j) {
            if (!is_ancestor(par[v][j], u))
                v = par[v][j];
        }

        return par[v][0];
    }    

    int ancestor (int u, int l) const {
        if (l >= depth[u])
            return root;
        
        for (int i = 0; l; ++i, l >>= 1)
            if (l & 1) u = par[u][i];

        return u;
    }

    int dist (const int u, const int v) const {
        return depth[u] + depth[v] - 2 * depth[lca(u, v)];
    }

private:

    const int N, root;
    std::vector<std::vector<int>> adj, par;
    std::vector<int> in, sub, depth;
    const int log_max_depth;

    void dfs (const int u, const int p = -1) {
        static int time = 0;
        in[u] = time++;

        auto& V = adj[u];
        if (auto j = std::find(V.begin(), V.end(), p); j != V.end())
            std::swap(V.back(), *j), V.pop_back();

        for (auto& v: V) {
            par[v][0] = u,
            depth[v] = depth[u] + 1,
            dfs(v, u),
            sub[u] += sub[v];
        }
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>itreelca</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>