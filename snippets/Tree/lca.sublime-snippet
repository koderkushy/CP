<snippet>
	<content><![CDATA[
class Lca {
    template<typename T> using vec = std::vector<T>;
public:
    Lca (const vec<vec<int>>& g, const int root = 0):
        n(g.size()), d(n), in(n), sub(n, 1), par(1, vec(n, root))
    {
        int t = 0;
        auto dfs = [&](auto&& dfs, int u) -> void {
            amax(LMD, d[u] - 1);
            in[u] = t++;
            
            for (int v: g[u]) if (v != par[0][u]) {
                par[0][v] = u;
                d[v] = d[u] + 1;
                dfs(dfs, v);
                sub[u] += sub[v];
            }
        };

        dfs(dfs, root);
        LMD = 32 - __builtin_clz(LMD);
        par.resize(LMD + 1, vec(n, root));

        for (int j = 0; j < LMD; ++j)
            for (int i = 0; i < n; ++i)
                par[j + 1][i] = par[j][par[j][i]];
    }

    bool is_ancestor (int u, int of) const {
        return in[u] <= in[of] and in[u] + sub[u] > in[of];
    }

    int ancestor (int u, int l) const {
        amin(l, d[u]);
        for (int i = 0; l; ++i, l /= 2)
            if (l & 1) u = par[i][u];
        return u;
    }

    int dist (int u, int v) const  {
        return d[u] + d[v] - 2 * d[lca(u, v)];
    }

    int lca (int u, int v) const {
        if (is_ancestor(u, v)) return u;
        if (is_ancestor(v, u)) return v;

        for (int j = LMD; j > -1; --j)
            if (!is_ancestor(par[j][v], u))
                v = par[j][v];
        return par[0][v];
    }

protected:
    const size_t n;
    vec<int> d, in, sub;
    vec<vec<int>> par;
    int LMD = 1;
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>itreelca</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>