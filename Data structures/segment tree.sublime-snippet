<snippet>
	<content><![CDATA[
template <class Node, class Comb>
struct Segtree{

    vector<Node> a;
    const int N;
    const Node identity; 
    const Comb com;
    
    template<typename... T>
    explicit Segtree (const int& n, const Node& id, T... args)
        : Segtree(vector(n, id), id, args...) {}

    explicit Segtree(const vector<Node>& x, const Node& id, const Comb& com)
        : N(1 << 32 - __builtin_clz(x.size() - 1)), identity(id), com(com){
        a = vector(N << 1, identity);
        copy(x.begin(), x.end(), N + a.begin());
        for(int i = N - 1; i; --i)
            a[i] = com(a[i << 1], a[i << 1 | 1]);
    }

    void up(int i, const Node x){
        assert(i > -1 and i < N);
        for(a[i += N] = x; i /= 2; )
            a[i] = com(a[i << 1], a[i << 1 | 1]);
    }

    Node qu(int l, int r){
        assert(l <= r and l > -1 and r <= N);
        if(l == 0 and r == N) return a[1];          // this needs resize to 2^K
        Node zl = identity, zr = zl;
        for(l += N, r += N; l < r; l >>= 1, r >>= 1)
            zl = (l & 1) ? com(zl, a[l++]): zl,
            zr = (r & 1) ? com(a[--r], zr): zr;
        return com(zl, zr);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>isegtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
