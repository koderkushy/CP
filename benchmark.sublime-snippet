<snippet>
	<content><![CDATA[
#include "bits/stdc++.h"
using namespace std;

typedef long long           lol;
typedef pair<int,int>       pii;
#define pb                  push_back
#define ub                  upper_bound
#define lb                  lower_bound
#define fo(i,l,r,d)         for(auto i=l; d<0?i>r:(d>0?i<r:0); i+=d)
#define all(x)              x.begin(), x.end()
#define ff                  first
#define ss                  second

mt19937 rng (chrono::high_resolution_clock::now().time_since_epoch().count());
template <typename A, typename B> ostream& operator<< (ostream &cout, pair<A, B> const &p) { return cout << "(" << p.first << ", " << p.second << ")"; }
template <typename A, typename B> istream& operator>> (istream& cin, pair<A, B> &p) {cin >> p.first; return cin >> p.second;}
template <typename A> ostream& operator<< (ostream &cout, vector<A> const &v) {cout << "["; for(int i = 0; i < v.size(); i++) {if (i) cout << ", "; cout << v[i];} return cout << "]";}
template <typename A> istream& operator>> (istream& cin, vector<A> &x){for(int i = 0; i < x.size()-1; i++) cin >> x[i]; return cin >> x[x.size()-1];}
template <typename A, typename B> A amax (A &a, B b){ if (b > a) a = b ; return a; }
template <typename A, typename B> A amin (A &a, B b){ if (b < a) a = b ; return a; }


struct input {
    // Input data members



    input ()
    {
        // Build input data




    }
};

int solve (const input& x) {

    int xr = 0;
    // Add solution here



    return xr;
}

vector<int> zzz;

vector<int> test () {

    vector<int> times;
    input x;
    vector<int> zz;

    chrono::time_point<chrono::high_resolution_clock> st, sp;
    auto now = [&]() {
        return chrono::high_resolution_clock::now();
    }; 

    st = now();
    zz.push_back(solve(x));
    sp = now();
    times.push_back(chrono::duration_cast<chrono::milliseconds>(sp - st).count());

    if (zzz.size() < zz.size())
        zzz.resize(zz.size(), 0);

    for (int i = 0; i < zz.size(); i++)
        zzz[i] ^= zz[i];

    return times;
}

int main(){
    ios_base::sync_with_stdio(0), cin.tie(0);

    int t = 20;

    vector<int> sum;

    vector<string> comments ({
        "",
        "",
        ""
    });

    for (int i = 0; i < t; i++) {
        auto times = test();

        if (sum.size() < times.size())
            sum.resize(times.size(), 0);

        for (int j = 0; j < times.size(); j++)
            sum[j] += times[j];
    }

    comments.resize(sum.size(), "");

    set<int> hashes(zzz.begin(), zzz.end());

    if (hashes.size() == 1) cout << "CONSISTENT\n\n";
    else cout << "NOT CONSISTENT\n\n";

    for (int i = 0; i < sum.size(); i++) {
        cout << "Solution #" << i+1 << ": " << comments[i] << "\n";
        cout << "Average time: " << sum[i] / t << " ms\n";
        cout << "Hash value: " << zzz[i] << "\n\n";
    }

}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>ibenchmarking</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
